// author : 颜洪毅
// e-mail : yhyzgn@gmail.com
// time   : 2023-08-25 16:15
// version: 1.0.0
// desc   :

package syntax

var tokenMap = map[token]string{
	Identifier: "IDENTIFIER",
	Literal:    "LITERAL",
	Pkg:        "pkg",
	Import:     "import",
	Class:      "class",
	Interface:  "interface",
	Enum:       "enum",
	Annotate:   "annotate",
	Abs:        "abs",
	Sealed:     "sealed",
	Is:         "is",
	As:         "as",
	Pub:        "pub",
	Pri:        "pri",
	Fn:         "fn",
	Defer:      "defer",
	Const:      "const",
	This:       "this",
	Super:      "super",
	Return:     "return",
	Break:      "break",
	Continue:   "continue",
	Try:        "try",
	Catch:      "catch",
	Finally:    "finally",
	For:        "for",
	If:         "if",
	Else:       "else",
	When:       "when",
	Throws:     "throws",
	Throw:      "throw",
	Nil:        "nil",
	Bee:        "bee",
	Goto:       "goto",
	Byte:       "byte",
	Short:      "short",
	Int:        "int",
	Long:       "long",
	UByte:      "ubyte",
	UShort:     "ushort",
	UInt:       "uint",
	ULong:      "ulong",
	Float:      "float",
	Double:     "double",
	Char:       "char",
	String:     "string",
	Bool:       "bool",
	Assign:     "=",
	Comma:      ",",
	Semi:       ";",
	Colon:      ":",
	Define:     ":=",
	Receive:    "<-",
	Arrow:      "->",
	Not:        "!",
	Tilde:      "~",
	Question:   "?",
	Add:        "+",
	Sub:        "-",
	Or:         "|",
	And:        "&",
	Xor:        "^",
	AndNot:     "&^",
	Mul:        "*",
	Div:        "/",
	Mod:        "%",
	Shl:        "<<",
	Shr:        ">>",
	OrOr:       "||",
	AndAnd:     "&&",
	Eql:        "==",
	Neq:        "!=",
	Lss:        "<",
	Leq:        "<=",
	Gtr:        ">",
	Geq:        ">=",
	AddAssign:  "+=",
	SubAssign:  "-=",
	MulAssign:  "*=",
	DivAssign:  "/=",
	ModAssign:  "%=",
	AndAssign:  "&=",
	OrAssign:   "|=",
	XorAssign:  "^=",
	ShlAssign:  "<<=",
	ShrAssign:  ">>=",
	AddAdd:     "++",
	SubSub:     "--",
	Lparen:     "(",
	Lbracket:   "[",
	Lbrace:     "{",
	Rparen:     ")",
	Rbracket:   "]",
	Rbrace:     "}",
	Dot:        ".",
	DotDot:     "..",
	DotDotDot:  "...",
	At:         "@",
	EOF:        "EOF",
	Error:      "ERROR",
}

func (t token) String() string {
	return tokenMap[t]
}

var literalKindMap = map[LiteralKind]string{
	None:      "NONE",
	IntLit:    "int",
	FloatLit:  "float",
	ImagLit:   "imag",
	CharLit:   "char",
	StringLit: "string",
}

func (lk LiteralKind) String() string {
	return literalKindMap[lk]
}
